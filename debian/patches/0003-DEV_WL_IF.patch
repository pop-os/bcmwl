index d7aba83..8aa5df8 100644
--- src/src/wl/sys/wl_iw.c.orig
+++ src/src/wl/sys/wl_iw.c
@@ -58,6 +58,12 @@ extern bool wl_iw_conn_status_str(uint32 event_type, uint32 status,
 #define htodchanspec(i) i
 #define dtohchanspec(i) i
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 29)
+#define	WL_DEV_IW(dev)		((wl_iw_t *)netdev_priv(dev))			
+#else
+#define	WL_DEV_IW(dev)		((wl_iw_t *)(dev)->priv)			
+#endif
+
 #ifdef CONFIG_WIRELESS_EXT
 extern struct iw_statistics *wl_get_wireless_stats(struct net_device *dev);
 #endif 
@@ -610,7 +616,7 @@ wl_iw_set_spy(
 	char *extra
 )
 {
-	wl_iw_t *iw = dev->priv;
+	wl_iw_t *iw = WL_DEV_IW(dev);
 	struct sockaddr *addr = (struct sockaddr *) extra;
 	int i;
 
@@ -635,7 +641,7 @@ wl_iw_get_spy(
 	char *extra
 )
 {
-	wl_iw_t *iw = dev->priv;
+	wl_iw_t *iw = WL_DEV_IW(dev);
 	struct sockaddr *addr = (struct sockaddr *) extra;
 	struct iw_quality *qual = (struct iw_quality *) &addr[iw->spy_num];
 	int i;
@@ -1110,7 +1116,7 @@ wl_iw_set_nick(
 	char *extra
 )
 {
-	wl_iw_t *iw = dev->priv;
+	wl_iw_t *iw = WL_DEV_IW(dev);
 
 	WL_TRACE(("%s: SIOCSIWNICKN\n", dev->name));
 
@@ -1134,7 +1140,7 @@ wl_iw_get_nick(
 	char *extra
 )
 {
-	wl_iw_t *iw = dev->priv;
+	wl_iw_t *iw = WL_DEV_IW(dev);
 
 	WL_TRACE(("%s: SIOCGIWNICKN\n", dev->name));
 
@@ -1790,7 +1796,7 @@ wl_iw_set_wpaauth(
 	int paramid;
 	int paramval;
 	int val = 0;
-	wl_iw_t *iw = dev->priv;
+	wl_iw_t *iw = WL_DEV_IW(dev);
 
 	WL_TRACE(("%s: SIOCSIWAUTH\n", dev->name));
 
@@ -1921,7 +1927,7 @@ wl_iw_get_wpaauth(
 	int paramid;
 	int paramval = 0;
 	int val;
-	wl_iw_t *iw = dev->priv;
+	wl_iw_t *iw = WL_DEV_IW(dev);
 
 	WL_TRACE(("%s: SIOCGIWAUTH\n", dev->name));
 
index 0f81236..a8e237a 100644
--- src/src/wl/sys/wl_linux.c.orig
+++ src/src/wl/sys/wl_linux.c
@@ -53,7 +53,9 @@
 #include <linux/pci_ids.h>
 #define WLC_MAXBSSCFG		1	
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 14)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 29)
+#include <net/lib80211.h>
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 14)
 #include <net/ieee80211.h>
 #endif
 
@@ -130,8 +132,12 @@ struct ieee80211_tkip_data {
 	u8 rx_hdr[16], tx_hdr[16];
 };
 
-#define	WL_DEV_IF(dev)		((wl_if_t*)(dev)->priv)			
 #define	WL_INFO(dev)		((wl_info_t*)(WL_DEV_IF(dev)->wl))	
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 29)
+#define	WL_DEV_IF(dev)		((wl_if_t*)netdev_priv(dev))			
+#else
+#define	WL_DEV_IF(dev)		((wl_if_t*)(dev)->priv)			
+#endif
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 20)
 #define	WL_ISR(i, d, p)		wl_isr((i), (d))
@@ -357,7 +365,14 @@ wl_attach(uint16 vendor, uint16 device, ulong regs, uint bustype, void *btparam,
 	}
 	wlif->dev_registed = TRUE;
 
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 14)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 29)
+
+	wl->tkipmodops = lib80211_get_crypto_ops("TKIP");
+	if (wl->tkipmodops == NULL) {
+		request_module("lib80211_crypt_tkip");
+		wl->tkipmodops = lib80211_get_crypto_ops("TKIP");
+	}
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 14)
 
 	wl->tkipmodops = ieee80211_get_crypto_ops("TKIP");
 	if (wl->tkipmodops == NULL) {
@@ -666,7 +681,7 @@ wl_free(wl_info_t *wl)
 	}
 
 	if (wl->monitor) {
-		wl_free_if(wl, (wl_if_t *)(wl->monitor->priv));
+		wl_free_if(wl, WL_DEV_IF(wl->monitor));
 		wl->monitor = NULL;
 	}
 
@@ -808,6 +823,29 @@ wl_txflowcontrol(wl_info_t *wl, bool state, int prio)
 	}
 }
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 29))
+static wl_if_t *wl_alloc_netdev(wl_info_t *wl)
+{
+		wl_if_t *wlif;
+		struct net_device *dev;
+		dev = alloc_netdev(sizeof(wl_if_t), name, ether_setup);
+		if (!dev) {
+			WL_ERROR(("wl%d: wl_alloc_if: out of memory, alloc_netdev\n",
+				(wl->pub)?wl->pub->unit:subunit));
+			return NULL;
+		}
+		wlif = WL_DEV_IF(dev);
+		wlif->dev = dev;
+		return wlif;
+}
+
+static void wl_free_netdev(wl_if_t *wlif)
+{
+		if (wlif->dev)
+				free_netdev(wlif->dev);
+}
+#endif
+
 struct wl_if *
 wl_alloc_if(wl_info_t *wl, int iftype, uint subunit, struct wlc_if* wlcif)
 {
@@ -815,6 +853,8 @@ wl_alloc_if(wl_info_t *wl, int iftype, uint subunit, struct wlc_if* wlcif)
 	wl_if_t *wlif;
 	wl_if_t *p;
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 29))
+
 	if (!(wlif = MALLOC(wl->osh, sizeof(wl_if_t)))) {
 		WL_ERROR(("wl%d: wl_alloc_if: out of memory, malloced %d bytes\n",
 		          (wl->pub)?wl->pub->unit:subunit, MALLOCED(wl->osh)));
@@ -842,12 +882,20 @@ wl_alloc_if(wl_info_t *wl, int iftype, uint subunit, struct wlc_if* wlcif)
 	}
 #endif 
 
+	dev->priv = wlif;
+
+#else
+	wlif = wl_alloc_netdev(wl);
+	if (!wlif)
+			return NULL;
+	dev = wlif->dev;
+#endif
+
 	wlif->type = iftype;
 	wlif->dev = dev;
 	wlif->wl = wl;
 	wlif->wlcif = wlcif;
 	wlif->subunit = subunit;
-	dev->priv = wlif;
 
 	if (iftype != WL_IFTYPE_MON && wl->dev && netif_queue_stopped(wl->dev))
 		netif_stop_queue(dev);
@@ -881,6 +929,10 @@ wl_free_if(wl_info_t *wl, wl_if_t *wlif)
 			p->next = p->next->next;
 	}
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 29))
+	wl_free_netdev(wlif);
+#else
+
 	if (wlif->dev) {
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 24))
 		MFREE(wl->osh, wlif->dev, sizeof(struct net_device));
@@ -889,6 +941,8 @@ wl_free_if(wl_info_t *wl, wl_if_t *wlif)
 #endif
 	}
 	MFREE(wl->osh, wlif, sizeof(wl_if_t));
+
+#endif
 }
 
 char *
index 0251e5e..a97efbe 100644
--- src/src/wl/sys/wl_linux.h.orig
+++ src/src/wl/sys/wl_linux.h
@@ -84,7 +84,11 @@ struct wl_info {
 	struct net_device *monitor;	
 	bool		resched;	
 	uint32		pci_psstate[16];	
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 14)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 29)
+	struct lib80211_crypto_ops *tkipmodops;	
+	struct lib80211_tkip_data  *tkip_ucast_data;
+	struct lib80211_tkip_data  *tkip_bcast_data;
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 14)
 	struct ieee80211_crypto_ops *tkipmodops;	
 	struct ieee80211_tkip_data  *tkip_ucast_data;
 	struct ieee80211_tkip_data  *tkip_bcast_data;
